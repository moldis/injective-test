// Code generated by mockery v2.23.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "code.injective.org/service/pricefetcher/internal/model"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockPrices is an autogenerated mock type for the Prices type
type MockPrices struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in
func (_m *MockPrices) Create(ctx context.Context, in *model.CurrentPrice) error {
	ret := _m.Called(ctx, in)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.CurrentPrice) error); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSinceDate provides a mock function with given fields: ctx, date
func (_m *MockPrices) GetSinceDate(ctx context.Context, date time.Time) ([]*model.CurrentPrice, error) {
	ret := _m.Called(ctx, date)

	var r0 []*model.CurrentPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) ([]*model.CurrentPrice, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) []*model.CurrentPrice); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.CurrentPrice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockPrices interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPrices creates a new instance of MockPrices. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPrices(t mockConstructorTestingTNewMockPrices) *MockPrices {
	mock := &MockPrices{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
